name: Auto-Update Public Documentation Version

on:
  push:
    branches: [main]
    paths:
      - 'lua/core/version.lua'

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from version.lua
        id: extract_version
        run: |
          VERSION=$(grep -oP 'M\.config_version = "\K[^"]+' lua/core/version.lua)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Extrahierte Version: $VERSION"

      - name: Update README.md
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Update "NEW in Modern LSP Performance Edition (vX.X.X)"
          sed -i "s/NEW in Modern LSP Performance Edition (v[0-9.]*)/NEW in Modern LSP Performance Edition (v$VERSION)/" README.md

          echo "✅ README.md aktualisiert auf v$VERSION"

      - name: Update project-info.json
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Update "version" field in JSON
          sed -i "s/\"version\": \"[0-9.]*\"/\"version\": \"$VERSION\"/" .github/project-info.json

          echo "✅ project-info.json aktualisiert auf $VERSION"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Keine Änderungen erforderlich - alle Dateien bereits aktuell"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📝 Änderungen gefunden:"
            git diff --name-only
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: Auto-update public documentation to version ${{ steps.extract_version.outputs.version }}"
          branch: auto-version-update-${{ steps.extract_version.outputs.version }}
          delete-branch: true
          title: "docs: Auto-update documentation to version ${{ steps.extract_version.outputs.version }}"
          body: |
            Automated version update triggered by changes to `lua/core/version.lua`

            **Changes:**
            - Update README.md version header to v${{ steps.extract_version.outputs.version }}
            - Update project-info.json version field to ${{ steps.extract_version.outputs.version }}

            **Source:** lua/core/version.lua
          labels: automation, documentation
          committer: VelocityNvim Version Bot <version-bot@velocitynvim.github>
          author: VelocityNvim Version Bot <version-bot@velocitynvim.github>

      - name: Enable auto-merge
        if: steps.create-pr.outputs.pull-request-number != ''
        run: gh pr merge --auto --squash ${{ steps.create-pr.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.create-pr.outputs.pull-request-number != ''
        run: |
          echo ""
          echo "════════════════════════════════════════"
          echo "✅ PULL REQUEST ERSTELLT"
          echo "════════════════════════════════════════"
          echo "Version: ${{ steps.extract_version.outputs.version }}"
          echo "PR #${{ steps.create-pr.outputs.pull-request-number }}"
          echo ""
          echo "Aktualisierte Dateien:"
          echo "  ✅ README.md"
          echo "  ✅ .github/project-info.json"
          echo ""
          echo "Auto-merge aktiviert - PR wird automatisch gemerged"
          echo "════════════════════════════════════════"
